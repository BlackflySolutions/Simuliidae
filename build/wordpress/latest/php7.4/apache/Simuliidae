#
# NOTE: THIS DOCKERFILE IS GENERATED VIA "apply-templates.sh"
#
# PLEASE DO NOT EDIT IT DIRECTLY.
#

# This is used to build extended versions of the wordpress image, with support for CiviCRM
# as well as production goodies that are not needed for testing or local/dev.
# Based on the similar template for Drupal.
# Goodies include:
# 1. msmtprc: a way to send mail via the host's mail system
# 2. handling of varnish+hitch proxying by apache [todo?]
# by default, do local building, but we could build from the blackfly repository when using automated build processes.
ARG REPOSITORY_FROM=
# Requires the VARIANT_TAG argument, which may be either the base or non-base version [??]
ARG VARIANT_TAG=
# Step 1. build the basic web service, a slightly extended version of the corresonding wordpress modified base image.
FROM ${REPOSITORY_FROM}wordpress:base-${VARIANT_TAG} as vhttp-base
# We create a wordpress user to own all the code, using 1978 as the uid
RUN useradd -u 1978 -g www-data -ms /bin/bash wordpress
# use the default document root inherited from php/apache
WORKDIR /var/www/html
# Add a way to send mail out, assuming the host can do mail at port 25. 
# The initialize.sh script sets up an entry in /etc/hosts to make it "easy".
# Use iproute2 to figure my ip route out to the host.
# Also include an ssh client as a useful binary for the vhttp image
RUN apt-get update && apt-get install -y msmtp iproute2 openssh-client && \
  apt-get clean && \
  echo 'sendmail_path = "/usr/bin/msmtp -C /etc/msmtprc -t"' > /usr/local/etc/php/conf.d/mail.ini
COPY msmtprc /etc/msmtprc
# increase default php limits and other customizations
COPY vhttp.ini /usr/local/etc/php/conf.d/
# provide some handy apache configuration
COPY vhttp.conf /etc/apache2/conf-available/
RUN a2enconf vhttp && a2enmod expires
# the initialize script needs to run after the container has been created. 
# as well as setting up "mail" in /etc/hosts, it looks for some site-specific
# apache and robots customization
COPY initialize.sh /usr/local/bin/initialize.sh
RUN chmod u+x /usr/local/bin/initialize.sh 
# default entrypoint runs initialize and then default/inherited CMD to start apache
# this is different from the wordpress image that does some fancy stuff to install
# wordpress if it doesn't exist. That functionality now resides in a separate admin script
# ie. less magic/automation.
COPY entrypoint.sh /entrypoint.sh
RUN chmod 775 /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
# inherited default CMD["apache2-foreground"], repeated here for good measure.
CMD ["apache2-foreground"]
# Step 2: build a basic admin service, adding some bits to the vhttp-base
# Admin runs sshd as it's CMD by default, but can be used to, e.g. do automated setup.
# We'll first build admin-minimal that we'll use later as a base for admin-build
FROM vhttp-base as admin-minimal
RUN apt-get update \
  && apt-get install -y mariadb-client sudo vim less zip unzip netcat ssh rsync openssh-server \
  && apt-get purge -y
# get latest wordpress cli version
RUN curl -L -o /usr/local/bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
RUN chmod u+x /usr/local/bin/wp
# Add this version's collection of admin convenience scripts [these are version specific and evolve!]
COPY admin/*sh /usr/local/bin/
# Include a copy of the cv civicrm command line utility
RUN curl -LsS https://download.civicrm.org/cv/cv.phar -o /usr/local/bin/cv
# make sure all my scripts are executable
RUN chmod ugo+x /usr/local/bin/wp && chmod ugo+x /usr/local/bin/cv && chmod ugo+x /usr/local/bin/*.sh 
# The apache for the container shouldn't actually be functional, it doesn't get invoked, so minimize it's resource use
# in case it's actually started.
COPY admin.conf /etc/apache2/conf-available
RUN a2enconf admin
# We inherit the initialization script and entrypoint from vhttp-base
# But we'll use a new entrypoint and cmd to run sshd
COPY entrypoint-sshd.sh /entrypoint-sshd.sh
RUN chmod 775 /entrypoint-sshd.sh && mkdir -p /var/run/sshd 
ENTRYPOINT ["/entrypoint-sshd.sh"]
CMD ["/entrypoint-sshd.sh"]
# Step 2.5 Add in parts for the admin container that are not needed in the admin-crm or admin-cms images
FROM admin-minimal as admin-base
# i.e. administrative tools that would be needed for installing or upgrading civicrm and wordpress in a base image
# TODO: see the Dockerfile for stuff after the base is built?
# RUN wp --allow-root --version
# Step 3: from the admin-base, add the CMS code, and then copy it over to the vhttp-base as the vhttp-cms
# This replaces the magic in the docker-entrypoint.sh script that the wordpress image uses.
FROM admin-base as admin-build-cms
# copied from the wordpress Dockerfile, the non-cli bits - build it in /usr/src and then use the CP
# to get it in the admin-cms image
RUN set -eux; \
	version='6.1.1'; \
	sha1='80f0f829645dec07c68bcfe0a0a1e1d563992fcb'; \
	\
	curl -o wordpress.tar.gz -fL "https://wordpress.org/wordpress-$version.tar.gz"; \
	echo "$sha1 *wordpress.tar.gz" | sha1sum -c -; \
	\
# upstream tarballs include ./wordpress/ so I need to strip-components
	tar -xz --strip-components=1 -f wordpress.tar.gz; \
	rm wordpress.tar.gz; \
	\
# https://wordpress.org/support/article/htaccess/
	[ ! -e /var/www/html/.htaccess ]; \
	{ \
		echo '# BEGIN WordPress'; \
		echo ''; \
		echo 'RewriteEngine On'; \
		echo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]'; \
		echo 'RewriteBase /'; \
		echo 'RewriteRule ^index\.php$ - [L]'; \
		echo 'RewriteCond %{REQUEST_FILENAME} !-f'; \
		echo 'RewriteCond %{REQUEST_FILENAME} !-d'; \
		echo 'RewriteRule . /index.php [L]'; \
		echo ''; \
		echo '# END WordPress'; \
	} > /var/www/html/.htaccess; \
	\
	chown -R www-data:www-data /var/www/html; \
	chmod -R 1777 wp-content
# next statement is not necessary?
VOLUME /var/www/html

# Step 4: from the admin-build-cms, add the crm files
FROM admin-build-cms as admin-build-crm
ENV CIVICRM_VERSION 5.59.3

RUN mkdir /var/www/html/wp-content/uploads

RUN cd /var/www/html/wp-content/plugins \
    && curl -L https://download.civicrm.org/civicrm-${CIVICRM_VERSION}-wordpress.zip > civicrm-wordpress.zip \
    && unzip civicrm-wordpress.zip \
    && rm civicrm-wordpress.zip

RUN cd /var/www/html/wp-content/plugins \
    && curl -L https://download.civicrm.org/civicrm-${CIVICRM_VERSION}-l10n.tar.gz > civicrm-l10n.tar.gz \
    && tar xzf civicrm-l10n.tar.gz \
    && rm civicrm-l10n.tar.gz
RUN chown -R wordpress:www-data /var/www/html/wp-content/plugins/civicrm;

# Step 5-6-7-8
# Buld the cms and crm flavours of the vhttp and admin by simple cp
FROM vhttp-base as vhttp-cms
COPY --from=admin-build-cms /var/www/html .
FROM vhttp-base as vhttp-crm
COPY --from=admin-build-crm /var/www/html .
FROM admin-minimal as admin-cms
COPY --from=admin-build-cms /var/www/html .
FROM admin-minimal as admin-crm
COPY --from=admin-build-crm /var/www/html .
